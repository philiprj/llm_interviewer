# name: Deploy to AWS

# on:
#   push:
#     branches:
#       - main
#       - develop
#   pull_request:
#     branches:
#       - main

# env:
#   AWS_REGION: us-east-1
#   ECR_REPOSITORY: llm-interviewer

# jobs:
#   test:
#     name: Run Tests
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: "3.12"

#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r requirements-dev.txt

#       - name: Run linting
#         run: |
#           black --check .
#           isort --check-only .
#           flake8 .

#       - name: Run type checking
#         run: mypy src/

#       - name: Run tests
#         run: pytest tests/ -v

#   terraform-plan:
#     name: Terraform Plan
#     runs-on: ubuntu-latest
#     needs: test
#     if: github.event_name == 'pull_request'

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v3
#         with:
#           terraform_version: ~1.0

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Terraform Init
#         working-directory: terraform
#         run: terraform init

#       - name: Terraform Validate
#         working-directory: terraform
#         run: terraform validate

#       - name: Terraform Plan
#         working-directory: terraform
#         run: |
#           terraform plan \
#             -var="openai_api_key=${{ secrets.OPENAI_API_KEY }}" \
#             -var="environment=staging" \
#             -var="aws_region=${{ env.AWS_REGION }}" \
#             -no-color
#         env:
#           TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}

#   deploy-staging:
#     name: Deploy to Staging
#     runs-on: ubuntu-latest
#     needs: test
#     if: github.ref == 'refs/heads/develop'
#     environment: staging

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v3
#         with:
#           terraform_version: ~1.0

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v2

#       - name: Deploy Infrastructure
#         working-directory: terraform
#         run: |
#           terraform init
#           terraform apply -auto-approve \
#             -var="openai_api_key=${{ secrets.OPENAI_API_KEY }}" \
#             -var="environment=staging" \
#             -var="aws_region=${{ env.AWS_REGION }}"
#         env:
#           TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}

#       - name: Get ECR Repository URL
#         id: ecr-url
#         working-directory: terraform
#         run: echo "ecr_url=$(terraform output -raw ecr_repository_url)" >> $GITHUB_OUTPUT

#       - name: Build, tag, and push image to Amazon ECR
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY_URL: ${{ steps.ecr-url.outputs.ecr_url }}
#           IMAGE_TAG: ${{ github.sha }}
#         run: |
#           docker build -t $ECR_REPOSITORY_URL:$IMAGE_TAG .
#           docker tag $ECR_REPOSITORY_URL:$IMAGE_TAG $ECR_REPOSITORY_URL:latest
#           docker push $ECR_REPOSITORY_URL:$IMAGE_TAG
#           docker push $ECR_REPOSITORY_URL:latest

#       - name: Update ECS Service
#         working-directory: terraform
#         run: |
#           CLUSTER_NAME=$(terraform output -raw ecs_cluster_name)
#           SERVICE_NAME=$(terraform output -raw ecs_service_name)
#           aws ecs update-service \
#             --cluster $CLUSTER_NAME \
#             --service $SERVICE_NAME \
#             --force-new-deployment \
#             --region ${{ env.AWS_REGION }}

#       - name: Wait for deployment
#         working-directory: terraform
#         run: |
#           CLUSTER_NAME=$(terraform output -raw ecs_cluster_name)
#           SERVICE_NAME=$(terraform output -raw ecs_service_name)
#           aws ecs wait services-stable \
#             --cluster $CLUSTER_NAME \
#             --services $SERVICE_NAME \
#             --region ${{ env.AWS_REGION }}

#       - name: Get Application URL
#         id: app-url
#         working-directory: terraform
#         run: echo "app_url=$(terraform output -raw application_url)" >> $GITHUB_OUTPUT

#       - name: Comment PR
#         if: github.event_name == 'pull_request'
#         uses: actions/github-script@v7
#         with:
#           script: |
#             github.rest.issues.createComment({
#               issue_number: context.issue.number,
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               body: 'ðŸš€ Staging deployment completed!\n\nðŸ“± Application URL: ${{ steps.app-url.outputs.app_url }}'
#             })

#   deploy-production:
#     name: Deploy to Production
#     runs-on: ubuntu-latest
#     needs: test
#     if: github.ref == 'refs/heads/main'
#     environment: production

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v3
#         with:
#           terraform_version: ~1.0

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v2

#       - name: Deploy Infrastructure
#         working-directory: terraform
#         run: |
#           terraform init
#           terraform apply -auto-approve \
#             -var="openai_api_key=${{ secrets.OPENAI_API_KEY }}" \
#             -var="environment=production" \
#             -var="aws_region=${{ env.AWS_REGION }}" \
#             -var="desired_count=3" \
#             -var="enable_autoscaling=true"
#         env:
#           TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}

#       - name: Get ECR Repository URL
#         id: ecr-url
#         working-directory: terraform
#         run: echo "ecr_url=$(terraform output -raw ecr_repository_url)" >> $GITHUB_OUTPUT

#       - name: Build, tag, and push image to Amazon ECR
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY_URL: ${{ steps.ecr-url.outputs.ecr_url }}
#           IMAGE_TAG: ${{ github.sha }}
#         run: |
#           docker build -t $ECR_REPOSITORY_URL:$IMAGE_TAG .
#           docker tag $ECR_REPOSITORY_URL:$IMAGE_TAG $ECR_REPOSITORY_URL:latest
#           docker push $ECR_REPOSITORY_URL:$IMAGE_TAG
#           docker push $ECR_REPOSITORY_URL:latest

#       - name: Update ECS Service
#         working-directory: terraform
#         run: |
#           CLUSTER_NAME=$(terraform output -raw ecs_cluster_name)
#           SERVICE_NAME=$(terraform output -raw ecs_service_name)
#           aws ecs update-service \
#             --cluster $CLUSTER_NAME \
#             --service $SERVICE_NAME \
#             --force-new-deployment \
#             --region ${{ env.AWS_REGION }}

#       - name: Wait for deployment
#         working-directory: terraform
#         run: |
#           CLUSTER_NAME=$(terraform output -raw ecs_cluster_name)
#           SERVICE_NAME=$(terraform output -raw ecs_service_name)
#           aws ecs wait services-stable \
#             --cluster $CLUSTER_NAME \
#             --services $SERVICE_NAME \
#             --region ${{ env.AWS_REGION }}

#       - name: Get Application URL
#         id: app-url
#         working-directory: terraform
#         run: echo "app_url=$(terraform output -raw application_url)" >> $GITHUB_OUTPUT
